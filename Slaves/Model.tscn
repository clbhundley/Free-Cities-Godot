[gd_scene load_steps=8 format=2]

[ext_resource path="res://Slaves/Models/Female/Hair/hair female 1.obj" type="ArrayMesh" id=1]
[ext_resource path="res://Slaves/Salmacis 201.escn" type="PackedScene" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

onready var _slave = owner
onready var body = get_node(\"Salmacis/SalmacisSkeleton/Salmacis\")
onready var genitals_male = get_node(\"Salmacis/SalmacisSkeleton/MaleGenitals\")
onready var genitals_female = get_node(\"Salmacis/SalmacisSkeleton/FemaleGenitals\")

var model_data
func _ready():
	make_resources_unique()
	set_skin_color()
	set_hairstyle()
	set_hair_color()
	set_genitals()
	if model_data:
		for setting in model_data:
			set(setting, model_data[setting])
		model_data = null
	else:
		set_default_values()

func set_default_values():
	self.weight = clamp(math.gaussian(75,28),20,100)/100
	if weight == 1:
		distribute_fat()
	self.waist_size = clamp(math.gaussian(75,8),50,100)/100
	if dice.roll(3) == 0:
		self.butt_size = clamp(math.gaussian(0,5),0,20)/100
	if dice.roll(4) == 0:
		distribute_body_size()
	if dice.roll(4) == 0:
		distribute_muscles()
	if _slave.gender == \"Male\":
		self.masculinity = clamp(math.gaussian(97,4),90,100)/100
	elif _slave.gender == \"Trans male\":
		self.masculinity = clamp(math.gaussian(80,10),70,100)/100
	elif _slave.gender == \"Female\":
		distribute_breast_growth()
		if dice.roll(4) == 0:
			self.breasts_implants = clamp(math.gaussian(12,12),0,55)/100
		if dice.roll(4) == 0:
			self.voluptuous = clamp(math.gaussian(0,9),0,25)/100
	elif _slave.gender == \"Trans female\":
		self.masculinity = clamp(math.gaussian(50,24),30,90)/100
		distribute_trans_breasts()
		if dice.roll(4) == 0:
			self.breasts_implants = clamp(math.gaussian(12,12),0,45)/100
	self.penis_length = clamp(math.gaussian(16,9),10,50)/100
	self.penis_thickness = clamp(math.gaussian(35,5),20,60)/100
	self.testicles_size = clamp(math.gaussian(25,7),10,50)/100

func distribute_breast_growth():
	if dice.roll(12) <= 4:
		self.breasts_growth = clamp(math.gaussian(10,12),0,35)/100
	elif dice.roll(12) <= 8:
		self.breasts_growth = clamp(math.gaussian(30,12),10,60)/100
	elif dice.roll(12) <= 11:
		if dice.roll(2) == 0:
			self.breasts_small = clamp(math.gaussian(60,12),30,90)/100
		else:
			self.breasts_growth = clamp(math.gaussian(60,12),30,90)/100

func distribute_trans_breasts():
	if dice.roll(12) <= 4:
		self.breasts_small = clamp(math.gaussian(50,22),0,100)/100
	elif dice.roll(12) <= 8:
		self.breasts_gone = clamp(math.gaussian(70,12),50,100)/100
	elif dice.roll(12) <= 11:
		self.breasts_growth = clamp(math.gaussian(10,12),0,35)/100

func distribute_fat():
	var average_fat = clamp(math.gaussian(35,25),0,80)/100
	var fat_type = [\"weight_round\",\"weight_fat\",\"weight_pear\"]
	fat_type.shuffle()
	var fat_combination = dice.roll(3)
	if fat_combination == 0:
		set(fat_type[0],average_fat)
	elif fat_combination == 1:
		var split = math.random_split_2(average_fat)
		set(fat_type[0],split[0])
		set(fat_type[1],split[1])
	elif fat_combination == 2:
		var split = math.random_split_3(average_fat)
		set(fat_type[0],split[0])
		set(fat_type[1],split[1])
		set(fat_type[2],split[2])

func distribute_body_size():
	if dice.roll(12) <= 5:
		self.body_size = clamp(math.gaussian(10,12),0,30)/100
	elif dice.roll(12) <= 9:
		self.body_size = clamp(math.gaussian(30,12),10,60)/100
	elif dice.roll(12) <= 11:
		self.body_size = clamp(math.gaussian(60,12),30,90)/100

func distribute_muscles():
	if dice.roll(12) <= 5:
		self.bodybuilder = clamp(math.gaussian(10,12),0,30)/100
	elif dice.roll(12) <= 9:
		self.bodybuilder = clamp(math.gaussian(30,12),10,60)/100
	elif dice.roll(12) <= 11:
		self.bodybuilder = clamp(math.gaussian(60,12),30,90)/100

func set_skin_color():
	var skin_material = SpatialMaterial.new()
	skin_material.albedo_color = _slave.skin_color
	body.set_surface_material(0,skin_material)
	genitals_male.set_surface_material(0,skin_material)
	genitals_female.set_surface_material(0,skin_material)

func set_hair_color():
	var hair_material = SpatialMaterial.new()
	hair_material.albedo_color = _slave.hair_color
	if not _slave.hair_style == \"none\":
		$Hair.set_surface_material(0, hair_material)

func set_hairstyle():
	var gender = _slave.gender.trim_prefix(\"Trans\").capitalize()
	if gender == \"Intersex\":
		gender = [\"Male\",\"Female\"][dice.roll(2)]
	if _slave.hair_style == \"none\":
		$Hair.mesh = null
		return
	var styles = [\"straight\", \"wavy\", \"curly\"]
	var str2 = 'res://Slaves/Models/%s/Hair/hair %s %s.obj'
	var load_str2 = str2%[gender,gender.to_lower(),str(styles.find(_slave.hair_style)+1)]
	var hair_mesh = load(load_str2)
	$Hair.mesh = hair_mesh

func set_genitals():
	if _slave.gender == \"Female\" or _slave.gender == \"Trans male\":
		genitals_male.hide()
		genitals_female.show()
		self.genitals_male_adjustment = 0
	else:
		genitals_male.show()
		genitals_female.hide()
		self.genitals_male_adjustment = 1

func armature_adjustment(value,morph,slope):
	var animation_tree = get_node(\"Salmacis/SalmacisSkeleton/AnimationTree\")
	var armature_value = animation_tree.get(\"parameters/Armature/blend_amount\")
	var difference = value - morph
	animation_tree.set(\"parameters/Armature/blend_amount\",armature_value+(difference/slope))
	armature_value = animation_tree.get(\"parameters/Armature/blend_amount\")

func make_resources_unique():
	body.mesh = body.mesh.duplicate()
	genitals_male.mesh = genitals_male.mesh.duplicate()
	genitals_female.mesh = genitals_female.mesh.duplicate()

func reset_weight(value):
	if value > 0:
		set_weight(1)

var masculinity = 0 setget set_masculinity
func set_masculinity(value):
	set_bodybuilder(bodybuilder)
	set_weight_fat(weight_fat)
	body.set(\"blend_shapes/Gender Male\", value)
	genitals_male.set(\"blend_shapes/Gender Male\", value)
	genitals_female.set(\"blend_shapes/Gender Male\", value)
	masculinity = value
	if _slave.gender == \"Female\" or _slave.gender == \"Trans Female\":
		if masculinity >= 0.85:
			_slave.flags[\"gender\"] = \"[color=#d70000]Completely Masculine[/color]\"
		elif masculinity >= 0.7:
			_slave.flags[\"gender\"] = \"[color=#ff0000]Very Masculine[/color]\" 
		elif masculinity >= 0.5:
			_slave.flags[\"gender\"] = \"[color=#ff4500]Masculine[/color]\" 
		elif masculinity >= 0.3:
			_slave.flags[\"gender\"] = \"[color=#ffa500]Somewhat Masculine[/color]\" 
		elif masculinity >= 0.15:
			_slave.flags[\"gender\"] = \"[color=#ffd100]Slightly Masculine[/color]\" 
	elif _slave.gender == \"Male\" or _slave.gender == \"Trans Male\":
		if masculinity <= 0.15:
			_slave.flags[\"gender\"] = \"[color=#d70000]Completely Feminine[/color]\"
		elif masculinity <= 0.3:
			_slave.flags[\"gender\"] = \"[color=#ff0000]Very Feminine[/color]\"
		elif masculinity <= 0.5:
			_slave.flags[\"gender\"] = \"[color=#ff4500]Feminine[/color]\"
		elif masculinity <= 0.7:
			_slave.flags[\"gender\"] = \"[color=#ffa500]Somewhat Feminine[/color]\"
		elif masculinity <= 0.85:
			_slave.flags[\"gender\"] = \"[color=#ffd100]Slightly Feminine[/color]\"

var genitals_male_adjustment = 0 setget set_genitals_male_adjustment
func set_genitals_male_adjustment(value):
	body.set(\"blend_shapes/Genitals Male\",value)
	genitals_male.set(\"blend_shapes/Genitals Male\",value)
	genitals_female.set(\"blend_shapes/Genitals Male\",value)
	genitals_male_adjustment = value

var weight = 0 setget set_weight
func set_weight(value):
	if value < 1:
		set_weight_fat(0)
		set_weight_pear(0)
		set_weight_round(0)
	armature_adjustment(value,weight,5.2)
	body.set(\"blend_shapes/Weight\",clamp((value-0.6)/0.4,0,1))
	body.set(\"blend_shapes/Weight Skinny\",clamp((value-0.6)/-0.3,0,1))
	body.set(\"blend_shapes/Weight Emaciated\",clamp((value-0.3)/-0.3,0,1))
	genitals_male.set(\"blend_shapes/Weight\",clamp((value-0.6)/0.4,0,1))
	genitals_male.set(\"blend_shapes/Weight Skinny\",clamp((value-0.6)/-0.3,0,1))
	genitals_male.set(\"blend_shapes/Weight Emaciated\",clamp((value-0.3)/-0.3,0,1))
	genitals_female.set(\"blend_shapes/Weight\",clamp((value-0.6)/0.4,0,1))
	genitals_female.set(\"blend_shapes/Weight Skinny\",clamp((value-0.6)/-0.3,0,1))
	genitals_female.set(\"blend_shapes/Weight Emaciated\",clamp((value-0.3)/-0.3,0,1))
	weight = value
	if weight <= 0.3:
		_slave.flags[\"weight\"] = \"[color=#ff0000]Emaciated[/color]\"
	elif weight <= 0.5:
		_slave.flags[\"weight\"] = \"[color=#ffa500]Skinny[/color]\"
	elif weight <= 0.7:
		_slave.flags[\"weight\"] = \"[color=white]Thin[/color]\"

func set_overweight_flags():
	var weight_total = weight + weight_fat + weight_pear + weight_round/2
	if weight_total >= 1.5:
		_slave.flags[\"weight\"] = \"[color=#ff0000]Obese[/color]\"
	elif weight_total >= 1.3:
		_slave.flags[\"weight\"] = \"[color=#ffa500]Fat[/color]\"
	elif weight_total >= 1.1:
		_slave.flags[\"weight\"] = \"[color=white]Chubby[/color]\"

var weight_round = 0 setget set_weight_round
func set_weight_round(value):
	reset_weight(value)
	body.set(\"blend_shapes/Weight Round\",value)
	genitals_male.set(\"blend_shapes/Weight Round\",value)
	genitals_female.set(\"blend_shapes/Weight Round\",value)
	armature_adjustment(value,weight_round,7.2)
	weight_round = value
	set_overweight_flags()

var weight_pear = 0 setget set_weight_pear
func set_weight_pear(value):
	reset_weight(value)
	body.set(\"blend_shapes/Weight Pear\",value)
	genitals_male.set(\"blend_shapes/Weight Pear\",value)
	genitals_female.set(\"blend_shapes/Weight Pear\",value)
	armature_adjustment(value,weight_pear,1.8)
	weight_pear = value
	set_overweight_flags()

var weight_fat = 0 setget set_weight_fat
func set_weight_fat(value):
	reset_weight(value)
	var male_amount = body.get(\"blend_shapes/Gender Male\")
	var female_amount = 1-male_amount
	body.set(\"blend_shapes/Weight Fat\",female_amount*value)
	body.set(\"blend_shapes/Weight Fat Male\",male_amount*value)
	genitals_male.set(\"blend_shapes/Weight Fat\",value)
	genitals_female.set(\"blend_shapes/Weight Fat\",value)
	armature_adjustment(value,weight_fat,1.3)
	weight_fat = value
	set_overweight_flags()

var waist_size = 0 setget set_waist_size
func set_waist_size(value):
	body.set(\"blend_shapes/WaistSize\",value)
	waist_size = value

var butt_size = 0 setget set_butt_size
func set_butt_size(value):
	body.set(\"blend_shapes/ButtSize\",value)
	genitals_male.set(\"blend_shapes/ButtSize\",value)
	genitals_female.set(\"blend_shapes/ButtSize\",value)
	butt_size = value

var body_size = 0 setget set_body_size
func set_body_size(value):
	body.set(\"blend_shapes/BodySize\",value)
	genitals_male.set(\"blend_shapes/BodySize\",value)
	genitals_female.set(\"blend_shapes/BodySize\",value)
	armature_adjustment(value,body_size,3.9)
	if masculinity > 0:
		breasts_small = masculinity
	body_size = value

var bodybuilder = 0 setget set_bodybuilder
func set_bodybuilder(value):
	body.set(\"blend_shapes/Bodybuilder\",value)
	genitals_male.set(\"blend_shapes/Bodybuilder\",value)
	genitals_female.set(\"blend_shapes/Bodybuilder\",value)
	armature_adjustment(value,bodybuilder,6.3)
	bodybuilder = value

var voluptuous = 0 setget set_voluptuous
func set_voluptuous(value):
	body.set(\"blend_shapes/Voluptuous\",value)
	genitals_male.set(\"blend_shapes/Voluptuous\",value)
	genitals_female.set(\"blend_shapes/Voluptuous\",value)
	armature_adjustment(value,voluptuous,1.7)
	voluptuous = value

var pregnant = 0 setget set_pregnant
func set_pregnant(value):
	body.set(\"blend_shapes/Pregnant\",value)
	genitals_male.set(\"blend_shapes/Pregnant\",value)
	genitals_female.set(\"blend_shapes/Pregnant\",value)
	armature_adjustment(value,pregnant,10)
	pregnant = value

var breasts_growth = 0 setget set_breasts_growth
func set_breasts_growth(value):
	body.set(\"blend_shapes/Breasts Growth1\",clamp((value-0.0)/0.5,0,1))
	body.set(\"blend_shapes/Breasts Growth2\",clamp((value-0.3)/0.5,0,1))
	body.set(\"blend_shapes/Breasts Growth3\",clamp((value-0.5)/0.5,0,1))
	breasts_growth = value

var breasts_implants = 0 setget set_breasts_implants
func set_breasts_implants(value):
	body.set(\"blend_shapes/Breasts Implants\",value)
	breasts_implants = value

var breasts_small = 0 setget set_breasts_small
func set_breasts_small(value):
	body.set(\"blend_shapes/Breasts Small\",value)
	breasts_small = value

var breasts_gone = 0 setget set_breasts_gone
func set_breasts_gone(value):
	body.set(\"blend_shapes/Breasts Gone\",value)
	breasts_gone = value

var testicles_size = 0 setget set_testicles_size
func set_testicles_size(value):
	genitals_male.set(\"blend_shapes/Testicles Size\",value)
	testicles_size = value

var penis_length = 0 setget set_penis_length
func set_penis_length(value):
	genitals_male.set(\"blend_shapes/Penis Length\",value)
	penis_length = value

var penis_thickness = 0 setget set_penis_thickness
func set_penis_thickness(value):
	genitals_male.set(\"blend_shapes/Penis Thickness\",value)
	penis_thickness = value

var penis_micro = 0 setget set_penis_micro
func set_penis_micro(value):
	genitals_male.set(\"blend_shapes/Penis Micro\",value)
	penis_micro = value
"

[sub_resource type="AnimationNodeAnimation" id=2]
animation = "IdlePose.Fat"

[sub_resource type="AnimationNodeAnimation" id=3]
animation = "IdlePose.MinSize"

[sub_resource type="AnimationNodeBlend2" id=4]

[sub_resource type="AnimationNodeBlendTree" id=5]
graph_offset = Vector2( 59, -26 )
nodes/Armature/node = SubResource( 4 )
nodes/Armature/position = Vector2( 620, 20 )
"nodes/Armature Max/node" = SubResource( 2 )
"nodes/Armature Max/position" = Vector2( 380, 120 )
"nodes/Armature Min/node" = SubResource( 3 )
"nodes/Armature Min/position" = Vector2( 340, 0 )
nodes/output/position = Vector2( 840, 60 )
node_connections = [ "output", 0, "Armature", "Armature", 0, "Armature Min", "Armature", 1, "Armature Max" ]

[node name="Model" type="Spatial"]
script = SubResource( 1 )

[node name="Hair" type="MeshInstance" parent="."]
mesh = ExtResource( 1 )
material/0 = null

[node name="Salmacis" parent="." instance=ExtResource( 3 )]

[node name="AnimationTree" type="AnimationTree" parent="Salmacis/SalmacisSkeleton" index="0"]
tree_root = SubResource( 5 )
anim_player = NodePath("../AnimationPlayer")
active = true
parameters/Armature/blend_amount = 0.0

[editable path="Salmacis"]
